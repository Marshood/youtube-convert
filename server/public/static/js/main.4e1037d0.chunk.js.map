{"version":3,"sources":["view/pages/home/home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","LoaderT","setLoader","urlInput","setUrlInput","urlOutpot","setUrlOutpot","pointerEvents","setpointerEvents","selectedOption","seTselectedOption","btnDownload","setBtnDownload","show","setShow","showTitle","setShowTitle","fileName","setFileName","ClearFields","console","log","className","type","color","secondaryColor","height","width","visible","class","onClick","onSubmit","e","preventDefault","YTURL","target","urlyoutube","value","UrlConvert","sendLinkProcessing","id","name","onChange","href","download","size","getVideoName","fetch","method","headers","body","JSON","stringify","then","response","json","jsonData","catch","error","a","setTimeout","status","blob","data","Date","url","window","webkitURL","createObjectURL","document","createElement","App","createBrowserHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4e1037d0.chunk.js","sourcesContent":["import { React, useState } from 'react';\r\nimport download from 'downloadjs';\r\nimport Loader from 'react-loader-spinner';\r\nimport './home.css'\r\nimport { FcNext } from \"react-icons/fc\";\r\nimport { IconContext } from \"react-icons\";\r\nexport default function Home() {\r\n    const [LoaderT, setLoader] = useState(false); // to show the loader icon\r\n    const [urlInput, setUrlInput] = useState(''); // to save the url input\r\n    const [urlOutpot, setUrlOutpot] = useState(''); // save blobr\r\n    const [pointerEvents, setpointerEvents] = useState(false)// to stop pointer events while video processing\r\n    const [selectedOption, seTselectedOption] = useState('mp4');//save file format \r\n    const [btnDownload, setBtnDownload] = useState(false); // to show download button \r\n    const [show, setShow] = useState(false); //to show alert \r\n    const [showTitle, setShowTitle] = useState(); // to show the title for the video on the screen \r\n    const [fileName, setFileName] = useState(\"Downloading\") // set file name to download\r\n\r\n    //to set the foramt\r\n    const handleChange = selectedOption => {\r\n        seTselectedOption(selectedOption.target.value);\r\n    };\r\n    //Alert hide\r\n    function AlertHide() {\r\n        setShow(false)\r\n        ClearFields()\r\n    }\r\n    // clear all the fields \r\n    function ClearFields() {\r\n        console.log(\"ClearFields on process...\");\r\n        setUrlInput('')\r\n        setBtnDownload(false)\r\n        setFileName(\"Downloading\")\r\n        setShowTitle()\r\n    }\r\n    return (\r\n        <div className={pointerEvents ? \"container pointerEvents\" : \"container\"}>\r\n            <div className=\"header\">\r\n                <h1  >Youtube Converter </h1>\r\n            </div>\r\n\r\n            <main>\r\n                <div className=\"main\">\r\n                    <Loader\r\n                        type=\"Puff\"\r\n                        color=\"#00BFFF\"\r\n                        secondaryColor=\"Grey\"\r\n                        height={100}\r\n                        width={100}\r\n                        //  timeout={3000} //3 secs\r\n                        visible={LoaderT} />\r\n                    {show &&\r\n                        <div class=\"alert\">\r\n                            <span class=\"closebtn\" onClick={AlertHide}>&times;</span>\r\n                            <strong>Error!</strong> Your link invalid, Please try again\r\n                      </div>\r\n\r\n                    }\r\n                    {!show &&\r\n                        <form onSubmit={(e) => sendLinkProcessing(e)}  >\r\n\r\n                            <h2>Please insert a valid video URL</h2>\r\n                            <br></br>\r\n                            <div className=\"form_style_input\">\r\n                                <input type=\"text\" id=\"LinkURL\" name=\"urlyoutube\" value={urlInput} onChange={(e) => { setUrlInput(e.target.value) }} /><br />\r\n                                <p className=\"PFontSize\">Format:</p>\r\n\r\n                                <select onChange={handleChange} name=\"cars\" id=\"cars\">\r\n                                    <option value=\"mp4\">mp4</option>\r\n                                    <option value=\"mp3\">mp3</option>\r\n\r\n                                </select>\r\n\r\n                                <br></br>\r\n                                <h4>\r\n                                    {showTitle}\r\n                                </h4>\r\n                                <br></br>\r\n                                {\r\n                                    btnDownload\r\n                                    &&\r\n                                    <a className=\"button hideBtnDownload\" href={urlOutpot} download={`${fileName}.${selectedOption}`} onClick={ClearFields} >Click to Downloadt</a>\r\n                                }\r\n                                {\r\n                                    !btnDownload\r\n                                    &&\r\n                                    <button className=\"button\" type=\"submit\">Convert </button>\r\n                                }\r\n                            </div>\r\n                        </form>\r\n                    }\r\n                </div>\r\n            </main>\r\n\r\n            {/* <div id=\"sidebar\">Sidebar</div> */}\r\n            <div className=\"about\">\r\n                <h2> YouTube Converter</h2>\r\n                <p>\r\n                    By using our converter you can easily convert YouTube videos to mp3 or mp4 files and download them for free - this service works for computer and mobile devices.\r\n                    <br></br> <br></br>\r\n                    The videos are always converted in the highest available quality. Please note that we can only convert videos up to a length of 1.5 hour - the limitation is necessary, so the conversion of any video will not take more than a couple of secunds.\r\n                    <br></br> <br></br>\r\n\r\n                    To convert a video, copy the YouTube video URL into our converter, choose a format and click the convert button. As soon as the conversion is finished the file automatically downloaded.                    <br></br> <br></br>\r\n                    Enjoy! We hope you like our service.\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"appUse\">\r\n                {/* BsArrowRightShort */}\r\n                <h2>How to use our YouTube Converter</h2>\r\n\r\n                <FcNext size={32} /> Copy a video link\r\n                In order to convert your file, you’ll need to choose a video first. So go ahead and visit YouTube  and copy a link to the video that you’d like to get converted\r\n                <br></br><br></br>\r\n                <FcNext size={32} /> Paste the copied link into the input field\r\n                Paste the link for a video that you want into the ‘Please insert a valid video URL’ field\r\n                <br></br><br></br>\r\n                <FcNext size={32} /> Choose the file format you want\r\n                 <br></br><br></br>\r\n                <FcNext size={32} /> Click Convert to get mp3/ mp4 file\r\n                This is the last step! All you have to do now is to click convert and wait just a little bit for your file to get converted.\r\n\r\n            </div>\r\n\r\n            <footer>\r\n                <small>&copy; 2020 - Marshood Ayoub</small>\r\n\r\n            </footer>\r\n        </div >\r\n\r\n    )\r\n\r\n    function sendLinkProcessing(e) {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        setpointerEvents(true);\r\n        const YTURL = e.target.urlyoutube.value;\r\n        console.log(\"YTURL 20: \", YTURL)\r\n        UrlConvert(YTURL);\r\n    }\r\n\r\n    function getVideoName(YTURL) {\r\n        fetch('/getvideoname', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    YTURL: YTURL,\r\n                })\r\n        }).then(response => response.json())\r\n            .then((jsonData) => {\r\n                setFileName(jsonData.name)\r\n                setShowTitle(jsonData.name)\r\n                console.log(\"name \", fileName, \"  jsonData\", jsonData.name)\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n    }\r\n    async function UrlConvert(YTURL) {\r\n        console.log(\"6969\")\r\n        getVideoName(YTURL)\r\n        setTimeout(() => { console.log(\"starting convert the video!\"); }, 3000);\r\n        fetch('/convertUrl', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    YTURL: YTURL,\r\n                    selectedOption: selectedOption\r\n                })\r\n        }).then(function (response) {\r\n            console.log(\"statuss\", response.status); // returns 200\r\n            response.blob().then(data => {\r\n                console.log(\"blob size:  \", data.size)\r\n                if (data.size > 1000) {\r\n                    console.log(\"data 37:\", data, Date())\r\n                    let url = window.webkitURL.createObjectURL(data);\r\n                    console.log(\"url\", url)\r\n                    let a = document.createElement('a');\r\n                    a.href = url;\r\n                    // setUrlInput(url)\r\n                    setUrlOutpot(url)\r\n                    setLoader(false);\r\n                    setpointerEvents(false);\r\n                    setBtnDownload(true)\r\n                    a.download = `mployees.${selectedOption}`;\r\n                    //a.click();\r\n                    console.log(\"colling func\");\r\n                    // getVideoName(YTURL)\r\n                }\r\n                else {\r\n                    console.log(\"error to convert the video try again!!\")\r\n                    setShow(true)\r\n                    setLoader(false);\r\n                    setpointerEvents(false);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async function getVideo(URL) {\r\n        console.log('getvideo URL', URL);\r\n\r\n        const response = await fetch('/sendUrlYoutubetest', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    YTURL: URL\r\n                })\r\n        })\r\n            .then(response => {\r\n                //buffer to fill with all data from server\r\n                let pdfContentBuffer = new Int8Array();\r\n\r\n                // response.body is a readableStream\r\n                const reader = response.body.getReader();\r\n\r\n                //function to retreive the next chunk from the stream\r\n                function handleChunk({ done, value }) {\r\n                    if (done) {\r\n                        //everything has been loaded, call `download()` to save gthe file as pdf and name it \"my-file.pdf\"\r\n                        download(pdfContentBuffer, `my-file.mp3`, 'audio/mpeg')\r\n                        return;\r\n                    }\r\n                    console.log(\"Loading..\", value.length, \" value\")\r\n                    // concat already loaded data with the loaded chunk\r\n                    pdfContentBuffer = Int8Array.from([...pdfContentBuffer, ...value]);\r\n                    console.log(\"Loading..\")\r\n\r\n                    // retreive next chunk\r\n                    reader.read().then(handleChunk);\r\n                }\r\n\r\n                //retreive first chunk\r\n                reader.read().then(handleChunk)\r\n            })\r\n            .catch(err => console.error(err))\r\n        // const reader = response.body.getReader();\r\n        // console.log(\"reader\", reader)\r\n        // while (true) {\r\n        //     const { value, done } = await reader.read();\r\n        //     if (done){\r\n\r\n\r\n        //         break; \r\n        //     }  \r\n        //     // console.log('Received', value);\r\n        // }\r\n\r\n        // console.log('Response fully received');\r\n    }\r\n\r\n\r\n\r\n}","import './App.css';\n\nimport Nav from './components/nav/nav';\nimport Home from './view/pages/home/home'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n  useLocation,\n  useParams,\n  HashRouter\n} from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nfunction App() {\n  const history = createBrowserHistory();\n\n  return (\n          <Home />\n\n    \n    // <HashRouter>\n    //   <Nav />\n    //   <Home />\n    // </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}