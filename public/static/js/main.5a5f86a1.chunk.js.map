{"version":3,"sources":["view/pages/home/home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","LoaderT","setLoader","urlInput","setUrlInput","urlOutpot","setUrlOutpot","pointerEvents","setpointerEvents","selectedOption","seTselectedOption","btnDownload","setBtnDownload","show","setShow","showTitle","setShowTitle","fileName","setFileName","VideoID","setVideoID","ShowVideo","setShowVideo","ClearFields","console","log","className","type","color","secondaryColor","height","width","visible","class","onClick","onSubmit","e","preventDefault","YTURL","target","urlyoutube","value","url","fetch","method","headers","body","JSON","stringify","then","response","json","data","title","UrlConvert","id","sendLinkProcessing","name","onChange","src","frameborder","allowfullscreen","href","download","size","a","status","blob","Date","window","webkitURL","createObjectURL","document","createElement","App","createBrowserHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a5f86a1.chunk.js","sourcesContent":["import { React, useState } from 'react';\r\nimport download from 'downloadjs';\r\nimport Loader from 'react-loader-spinner';\r\nimport './home.css'\r\nimport { FcNext } from \"react-icons/fc\";\r\nexport default function Home() {\r\n    const [LoaderT, setLoader] = useState(false); // to show the loader icon\r\n    const [urlInput, setUrlInput] = useState(''); // to save the url input\r\n    const [urlOutpot, setUrlOutpot] = useState(''); // save blobr\r\n    const [pointerEvents, setpointerEvents] = useState(false)// to stop pointer events while video processing\r\n    const [selectedOption, seTselectedOption] = useState('mp4');//save file format \r\n    const [btnDownload, setBtnDownload] = useState(false); // to show download button \r\n    const [show, setShow] = useState(false); //to show alert \r\n    const [showTitle, setShowTitle] = useState(); // to show the title for the video on the screen \r\n    const [fileName, setFileName] = useState(\"Downloading\") // set file name to download\r\n    const [VideoID, setVideoID] = useState('KrMIczw4Dng');\r\n    const [ShowVideo, setShowVideo] = useState(true);\r\n    //to set the foramt\r\n    const handleChange = selectedOption => {\r\n        seTselectedOption(selectedOption.target.value);\r\n    };\r\n    //Alert hide\r\n    function AlertHide() {\r\n        setShow(false)\r\n        ClearFields()\r\n    }\r\n    // clear all the fields \r\n    function ClearFields() {\r\n        console.log(\"ClearFields on process...\");\r\n        setUrlInput('')\r\n        setBtnDownload(false)\r\n        setFileName(\"Downloading\")\r\n        setShowTitle();\r\n        setShowVideo(false);\r\n        setVideoID('');\r\n    }\r\n    return (\r\n        <div className={pointerEvents ? \"container pointerEvents\" : \"container\"}>\r\n            <div className=\"header\">\r\n                <h1  >Youtube Converter </h1>\r\n            </div>\r\n\r\n            <main>\r\n                <div className=\"main\">\r\n                    <Loader\r\n                        type=\"Puff\"\r\n                        color=\"#00BFFF\"\r\n                        secondaryColor=\"Grey\"\r\n                        height={100}\r\n                        width={100}\r\n                        //  timeout={3000} //3 secs\r\n                        visible={LoaderT} />\r\n                    {show &&\r\n                        <div class=\"alert\">\r\n                            <span class=\"closebtn\" onClick={AlertHide}>&times;</span>\r\n                            <strong>Error!</strong> Your link invalid, Please try again\r\n                      </div>\r\n\r\n                    }\r\n                    {!show &&\r\n                        <form onSubmit={(e) => sendLinkProcessing(e)}  >\r\n\r\n                            <h2>Please insert a valid video URL</h2>\r\n                            <br></br>\r\n                            <div className=\"form_style_input\">\r\n                                <input type=\"text\" id=\"LinkURL\" name=\"urlyoutube\" value={urlInput} onChange={(e) => { setUrlInput(e.target.value) }} /><br />\r\n                                <p className=\"PFontSize\">Format:</p>\r\n\r\n                                <select onChange={handleChange} name=\"cars\" id=\"cars\">\r\n                                    <option value=\"mp4\">MP4/ Video</option>\r\n                                    <option value=\"mp3\">MP3/ Audio</option>\r\n\r\n                                </select>\r\n\r\n                                <br></br>\r\n                                <h4>\r\n                                    {showTitle}\r\n                                </h4>\r\n                                   { ShowVideo &&\r\n                                    <iframe width=\"auto\" height=\"auto\" src={`https://www.youtube.com/embed/${VideoID}`} frameborder=\"0\" allowfullscreen></iframe>\r\n                                }\r\n                                <br></br>\r\n                                {\r\n                                    btnDownload\r\n                                    &&\r\n                                    <a className=\"button hideBtnDownload\" href={urlOutpot} download={`${fileName}.${selectedOption}`} onClick={ClearFields} >Click to Downloadt</a>\r\n                                }\r\n                                {\r\n                                    !btnDownload\r\n                                    &&\r\n                                    <button className=\"button\" type=\"submit\">Convert </button>\r\n                                }\r\n                            </div>\r\n                        </form>\r\n\r\n                    }\r\n\r\n                </div>\r\n            </main>\r\n\r\n            {/* <div id=\"sidebar\">Sidebar</div> */}\r\n            <div className=\"about\">\r\n                <h2> YouTube Converter</h2>\r\n                <p>\r\n                    By using our converter you can easily convert YouTube videos to mp3 or mp4 files and download them for free - this service works for computer and mobile devices.\r\n                    <br></br> <br></br>\r\n                    The videos are always converted in the highest available quality. Please note that we can only convert videos up to a length of 1.5 hour - the limitation is necessary, so the conversion of any video will not take more than a couple of secunds.\r\n                    <br></br> <br></br>\r\n\r\n                    To convert a video, copy the YouTube video URL into our converter, choose a format and click the convert button. As soon as the conversion is finished the file automatically downloaded.                    <br></br> <br></br>\r\n                    Enjoy! We hope you like our service.\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"appUse\">\r\n                {/* BsArrowRightShort */}\r\n                <h2>How to use our YouTube Converter</h2>\r\n\r\n                <FcNext size={32} /> Copy a video link\r\n                In order to convert your file, you’ll need to choose a video first. So go ahead and visit YouTube  and copy a link to the video that you’d like to get converted\r\n                <br></br><br></br>\r\n                <FcNext size={32} /> Paste the copied link into the input field\r\n                Paste the link for a video that you want into the ‘Please insert a valid video URL’ field\r\n                <br></br><br></br>\r\n                <FcNext size={32} /> Choose the file format you want\r\n                 <br></br><br></br>\r\n                <FcNext size={32} /> Click Convert to get mp3/ mp4 file\r\n                This is the last step! All you have to do now is to click convert and wait just a little bit for your file to get converted.\r\n\r\n            </div>\r\n\r\n            <footer>\r\n                <small>&copy; 2020 - Marshood Ayoub</small>\r\n\r\n            </footer>\r\n        </div >\r\n\r\n    )\r\n\r\n    function sendLinkProcessing(e) {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        setpointerEvents(true);\r\n        const YTURL = e.target.urlyoutube.value;\r\n        checkURL(YTURL);\r\n        console.log(\"YTURL 20: \", YTURL);\r\n        // UrlConvert(YTURL);\r\n\r\n        // getVideo(YTURL)\r\n        // download(YTURL)\r\n    }\r\n\r\n    function checkURL(url) {\r\n        console.log(\"url \", url)\r\n        fetch('/checkURL', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    url: url,\r\n                })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data.title)\r\n                if (data.title != null) {\r\n                    console.log(\"title succes\")\r\n                    UrlConvert(url);\r\n                    setFileName(data.title);\r\n                    setShowTitle(data.title);\r\n                    setVideoID(data.id)\r\n                    setShowVideo(true);\r\n                }\r\n                else {\r\n                    console.log(\"title error\")\r\n                    console.log(\"error to convert the video try again!!\")\r\n                    setShow(true)\r\n                    setLoader(false);\r\n                    setpointerEvents(false);\r\n                    setShowVideo(false);\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n\r\n\r\n    function getVideoName(YTURL) {\r\n        console.log(\"getVideo title....\")\r\n        fetch('/getvideoname', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    YTURL: YTURL,\r\n                })\r\n        }).then(response => response.json())\r\n            .then((jsonData) => {\r\n                setFileName(jsonData.name)\r\n                setShowTitle(jsonData.name)\r\n                console.log(\"name \", fileName, \"  jsonData\", jsonData.name)\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n    }\r\n    async function UrlConvert(YTURL) {\r\n        console.log(\"starting video convert....\")\r\n        // getVideoName(YTURL)\r\n        fetch('/convertUrl', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    YTURL: YTURL,\r\n                    selectedOption: selectedOption\r\n                })\r\n        }).then(function (response) {\r\n            console.log(\"statuss\", response.status); // returns 200\r\n            response.blob().then(data => {\r\n                console.log(\"blob size:data   \", data)\r\n                if (data.size > 1000) {\r\n                    console.log(\"data 37:\", data, Date())\r\n                    let url = window.webkitURL.createObjectURL(data);\r\n                    console.log(\"url\", url)\r\n                    let a = document.createElement('a');\r\n                    a.href = url;\r\n                    // setUrlInput(url)\r\n                    setUrlOutpot(url)\r\n                    setLoader(false);\r\n                    setpointerEvents(false);\r\n                    setBtnDownload(true)\r\n                    a.download = `mployees.${selectedOption}`;\r\n                    //a.click();\r\n                    console.log(\"colling func\");\r\n                    // getVideoName(YTURL)\r\n                }\r\n                else {\r\n                    console.log(\"error to convert the video try again!!\")\r\n                    setShow(true)\r\n                    setLoader(false);\r\n                    setpointerEvents(false);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async function getVideo(URL) {\r\n        console.log('getvideo URL', URL);\r\n\r\n        const response = await fetch('/video', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    url: URL\r\n                })\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                setUrlInput(data.meta.formats[0].url)\r\n                console.log(\"testdata: \", data.meta.formats[0].url)\r\n                setpointerEvents(false);\r\n                console.log(\"urll\", data.meta.formats[0].url);\r\n                download(data.meta.formats[0].url)\r\n            })\r\n            .catch(err => console.error(err))\r\n    }\r\n\r\n\r\n\r\n\r\n}","import './App.css';\n\nimport Nav from './components/nav/nav';\nimport Home from './view/pages/home/home'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n  useLocation,\n  useParams,\n  HashRouter\n} from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nfunction App() {\n  const history = createBrowserHistory();\n\n  return (\n          <Home />\n\n    \n    // <HashRouter>\n    //   <Nav />\n    //   <Home />\n    // </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}